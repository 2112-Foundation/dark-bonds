/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import { GateType, gateTypeBeet } from '../types/GateType'

/**
 * @category Instructions
 * @category AddGate
 * @category generated
 */
export type AddGateInstructionArgs = {
  iboIdx: number
  lockupIdx: number
  gateSettings: GateType[]
}
/**
 * @category Instructions
 * @category AddGate
 * @category generated
 */
export const addGateStruct = new beet.FixableBeetArgsStruct<
  AddGateInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['iboIdx', beet.u32],
    ['lockupIdx', beet.u32],
    ['gateSettings', beet.array(gateTypeBeet)],
  ],
  'AddGateInstructionArgs'
)
/**
 * Accounts required by the _addGate_ instruction
 *
 * @property [_writable_, **signer**] admin
 * @property [_writable_] ibo
 * @property [_writable_] lockup
 * @property [_writable_] gate
 * @property [_writable_] master
 * @category Instructions
 * @category AddGate
 * @category generated
 */
export type AddGateInstructionAccounts = {
  admin: web3.PublicKey
  ibo: web3.PublicKey
  lockup: web3.PublicKey
  gate: web3.PublicKey
  master: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const addGateInstructionDiscriminator = [
  89, 220, 103, 18, 25, 101, 194, 176,
]

/**
 * Creates a _AddGate_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category AddGate
 * @category generated
 */
export function createAddGateInstruction(
  accounts: AddGateInstructionAccounts,
  args: AddGateInstructionArgs,
  programId = new web3.PublicKey('8ZP1cSpVPVPp5aeake5f1BtgW1xv1e39zkoG8bWobbwV')
) {
  const [data] = addGateStruct.serialize({
    instructionDiscriminator: addGateInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.admin,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.ibo,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.lockup,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.gate,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.master,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
