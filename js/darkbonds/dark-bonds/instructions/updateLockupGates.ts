/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from "@metaplex-foundation/beet";
import * as web3 from "@solana/web3.js";

/**
 * @category Instructions
 * @category UpdateLockupGates
 * @category generated
 */
export type UpdateLockupGatesInstructionArgs = {
  iboIdx: number;
  lockupIdx: number;
  gatesAdd: number[];
  gatesRemove: number[];
};
/**
 * @category Instructions
 * @category UpdateLockupGates
 * @category generated
 */
export const updateLockupGatesStruct = new beet.FixableBeetArgsStruct<
  UpdateLockupGatesInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ["instructionDiscriminator", beet.uniformFixedSizeArray(beet.u8, 8)],
    ["iboIdx", beet.u32],
    ["lockupIdx", beet.u32],
    ["gatesAdd", beet.array(beet.u32)],
    ["gatesRemove", beet.array(beet.u32)],
  ],
  "UpdateLockupGatesInstructionArgs"
);
/**
 * Accounts required by the _updateLockupGates_ instruction
 *
 * @property [_writable_, **signer**] admin
 * @property [_writable_] ibo
 * @property [_writable_] lockup
 * @property [_writable_] main
 * @category Instructions
 * @category UpdateLockupGates
 * @category generated
 */
export type UpdateLockupGatesInstructionAccounts = {
  admin: web3.PublicKey;
  ibo: web3.PublicKey;
  lockup: web3.PublicKey;
  main: web3.PublicKey;
  systemProgram?: web3.PublicKey;
  anchorRemainingAccounts?: web3.AccountMeta[];
};

export const updateLockupGatesInstructionDiscriminator = [
  176, 248, 88, 52, 3, 207, 35, 98,
];

/**
 * Creates a _UpdateLockupGates_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category UpdateLockupGates
 * @category generated
 */
export function createUpdateLockupGatesInstruction(
  accounts: UpdateLockupGatesInstructionAccounts,
  args: UpdateLockupGatesInstructionArgs,
  programId = new web3.PublicKey("8ZP1cSpVPVPp5aeake5f1BtgW1xv1e39zkoG8bWobbwV")
) {
  const [data] = updateLockupGatesStruct.serialize({
    instructionDiscriminator: updateLockupGatesInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.admin,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.ibo,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.lockup,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.main,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ];

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc);
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}
