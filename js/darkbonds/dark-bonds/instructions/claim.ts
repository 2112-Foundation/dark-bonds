/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as web3 from '@solana/web3.js'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import * as beet from '@metaplex-foundation/beet'

/**
 * @category Instructions
 * @category Claim
 * @category generated
 */
export type ClaimInstructionArgs = {
  iboAddress: web3.PublicKey
  iboIdx: number
}
/**
 * @category Instructions
 * @category Claim
 * @category generated
 */
export const claimStruct = new beet.BeetArgsStruct<
  ClaimInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['iboAddress', beetSolana.publicKey],
    ['iboIdx', beet.u32],
  ],
  'ClaimInstructionArgs'
)
/**
 * Accounts required by the _claim_ instruction
 *
 * @property [_writable_, **signer**] bondOwner
 * @property [_writable_] bond
 * @property [_writable_] bondOwnerAta
 * @property [_writable_] bondAta
 * @category Instructions
 * @category Claim
 * @category generated
 */
export type ClaimInstructionAccounts = {
  bondOwner: web3.PublicKey
  bond: web3.PublicKey
  bondOwnerAta: web3.PublicKey
  bondAta: web3.PublicKey
  systemProgram?: web3.PublicKey
  tokenProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const claimInstructionDiscriminator = [
  62, 198, 214, 193, 213, 159, 108, 210,
]

/**
 * Creates a _Claim_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category Claim
 * @category generated
 */
export function createClaimInstruction(
  accounts: ClaimInstructionAccounts,
  args: ClaimInstructionArgs,
  programId = new web3.PublicKey('8ZP1cSpVPVPp5aeake5f1BtgW1xv1e39zkoG8bWobbwV')
) {
  const [data] = claimStruct.serialize({
    instructionDiscriminator: claimInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.bondOwner,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.bond,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.bondOwnerAta,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.bondAta,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
