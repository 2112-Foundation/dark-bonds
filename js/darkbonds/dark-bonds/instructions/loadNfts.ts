/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category LoadNfts
 * @category generated
 */
export type LoadNftsInstructionArgs = {
  iboIdx: number
  treeIdx: number
  vertexIdx0: number
  vertexIdx1: number
  vertexIdx2: number
  nftBasketIdx: number
}
/**
 * @category Instructions
 * @category LoadNfts
 * @category generated
 */
export const loadNftsStruct = new beet.BeetArgsStruct<
  LoadNftsInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['iboIdx', beet.u32],
    ['treeIdx', beet.u8],
    ['vertexIdx0', beet.u8],
    ['vertexIdx1', beet.u8],
    ['vertexIdx2', beet.u8],
    ['nftBasketIdx', beet.u8],
  ],
  'LoadNftsInstructionArgs'
)
/**
 * Accounts required by the _loadNfts_ instruction
 *
 * @property [_writable_, **signer**] admin
 * @property [_writable_] ibo
 * @property [] tree
 * @property [_writable_] nftBasket
 * @category Instructions
 * @category LoadNfts
 * @category generated
 */
export type LoadNftsInstructionAccounts = {
  admin: web3.PublicKey
  ibo: web3.PublicKey
  tree: web3.PublicKey
  nftBasket: web3.PublicKey
  tokenProgram?: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const loadNftsInstructionDiscriminator = [
  113, 210, 227, 156, 108, 222, 105, 8,
]

/**
 * Creates a _LoadNfts_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category LoadNfts
 * @category generated
 */
export function createLoadNftsInstruction(
  accounts: LoadNftsInstructionAccounts,
  args: LoadNftsInstructionArgs,
  programId = new web3.PublicKey('8ZP1cSpVPVPp5aeake5f1BtgW1xv1e39zkoG8bWobbwV')
) {
  const [data] = loadNftsStruct.serialize({
    instructionDiscriminator: loadNftsInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.admin,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.ibo,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tree,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.nftBasket,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
