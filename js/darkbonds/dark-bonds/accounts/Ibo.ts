/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import * as beetSolana from '@metaplex-foundation/beet-solana'

/**
 * Arguments used to create {@link Ibo}
 * @category Accounts
 * @category generated
 */
export type IboArgs = {
  lockupsLocked: boolean
  withdrawsLocked: boolean
  fixedExchangeRate: beet.bignum
  swapCut: beet.bignum
  liveDate: beet.bignum
  endDate: beet.bignum
  liquidityToken: web3.PublicKey
  underlyingToken: web3.PublicKey
  recipientAddress: web3.PublicKey
  admin: web3.PublicKey
  lockupCounter: number
  bondCounter: number
  gateCounter: number
  nftCounter: number
  nftBasePrice: beet.bignum
  treeCounter: number
}

export const iboDiscriminator = [241, 56, 108, 84, 124, 148, 136, 234]
/**
 * Holds the data for the {@link Ibo} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class Ibo implements IboArgs {
  private constructor(
    readonly lockupsLocked: boolean,
    readonly withdrawsLocked: boolean,
    readonly fixedExchangeRate: beet.bignum,
    readonly swapCut: beet.bignum,
    readonly liveDate: beet.bignum,
    readonly endDate: beet.bignum,
    readonly liquidityToken: web3.PublicKey,
    readonly underlyingToken: web3.PublicKey,
    readonly recipientAddress: web3.PublicKey,
    readonly admin: web3.PublicKey,
    readonly lockupCounter: number,
    readonly bondCounter: number,
    readonly gateCounter: number,
    readonly nftCounter: number,
    readonly nftBasePrice: beet.bignum,
    readonly treeCounter: number
  ) {}

  /**
   * Creates a {@link Ibo} instance from the provided args.
   */
  static fromArgs(args: IboArgs) {
    return new Ibo(
      args.lockupsLocked,
      args.withdrawsLocked,
      args.fixedExchangeRate,
      args.swapCut,
      args.liveDate,
      args.endDate,
      args.liquidityToken,
      args.underlyingToken,
      args.recipientAddress,
      args.admin,
      args.lockupCounter,
      args.bondCounter,
      args.gateCounter,
      args.nftCounter,
      args.nftBasePrice,
      args.treeCounter
    )
  }

  /**
   * Deserializes the {@link Ibo} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [Ibo, number] {
    return Ibo.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link Ibo} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig
  ): Promise<Ibo> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig
    )
    if (accountInfo == null) {
      throw new Error(`Unable to find Ibo account at ${address}`)
    }
    return Ibo.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      '8ZP1cSpVPVPp5aeake5f1BtgW1xv1e39zkoG8bWobbwV'
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, iboBeet)
  }

  /**
   * Deserializes the {@link Ibo} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [Ibo, number] {
    return iboBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link Ibo} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return iboBeet.serialize({
      accountDiscriminator: iboDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link Ibo}
   */
  static get byteSize() {
    return iboBeet.byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link Ibo} data from rent
   *
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      Ibo.byteSize,
      commitment
    )
  }

  /**
   * Determines if the provided {@link Buffer} has the correct byte size to
   * hold {@link Ibo} data.
   */
  static hasCorrectByteSize(buf: Buffer, offset = 0) {
    return buf.byteLength - offset === Ibo.byteSize
  }

  /**
   * Returns a readable version of {@link Ibo} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      lockupsLocked: this.lockupsLocked,
      withdrawsLocked: this.withdrawsLocked,
      fixedExchangeRate: (() => {
        const x = <{ toNumber: () => number }>this.fixedExchangeRate
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      swapCut: (() => {
        const x = <{ toNumber: () => number }>this.swapCut
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      liveDate: (() => {
        const x = <{ toNumber: () => number }>this.liveDate
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      endDate: (() => {
        const x = <{ toNumber: () => number }>this.endDate
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      liquidityToken: this.liquidityToken.toBase58(),
      underlyingToken: this.underlyingToken.toBase58(),
      recipientAddress: this.recipientAddress.toBase58(),
      admin: this.admin.toBase58(),
      lockupCounter: this.lockupCounter,
      bondCounter: this.bondCounter,
      gateCounter: this.gateCounter,
      nftCounter: this.nftCounter,
      nftBasePrice: (() => {
        const x = <{ toNumber: () => number }>this.nftBasePrice
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
      treeCounter: this.treeCounter,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const iboBeet = new beet.BeetStruct<
  Ibo,
  IboArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['lockupsLocked', beet.bool],
    ['withdrawsLocked', beet.bool],
    ['fixedExchangeRate', beet.u64],
    ['swapCut', beet.u64],
    ['liveDate', beet.i64],
    ['endDate', beet.i64],
    ['liquidityToken', beetSolana.publicKey],
    ['underlyingToken', beetSolana.publicKey],
    ['recipientAddress', beetSolana.publicKey],
    ['admin', beetSolana.publicKey],
    ['lockupCounter', beet.u32],
    ['bondCounter', beet.u32],
    ['gateCounter', beet.u32],
    ['nftCounter', beet.u32],
    ['nftBasePrice', beet.u64],
    ['treeCounter', beet.u8],
  ],
  Ibo.fromArgs,
  'Ibo'
)
