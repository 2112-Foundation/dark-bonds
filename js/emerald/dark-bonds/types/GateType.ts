/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import { CollectionType, collectionTypeBeet } from './CollectionType'
import { SplType, splTypeBeet } from './SplType'
/**
 * This type is used to derive the {@link GateType} type as well as the de/serializer.
 * However don't refer to it in your code but use the {@link GateType} type instead.
 *
 * @category userTypes
 * @category enums
 * @category generated
 * @private
 */
export type GateTypeRecord = {
  Collection: { gate: CollectionType }
  Spl: { gate: SplType }
}

/**
 * Union type respresenting the GateType data enum defined in Rust.
 *
 * NOTE: that it includes a `__kind` property which allows to narrow types in
 * switch/if statements.
 * Additionally `isGateType*` type guards are exposed below to narrow to a specific variant.
 *
 * @category userTypes
 * @category enums
 * @category generated
 */
export type GateType = beet.DataEnumKeyAsKind<GateTypeRecord>

export const isGateTypeCollection = (
  x: GateType
): x is GateType & { __kind: 'Collection' } => x.__kind === 'Collection'
export const isGateTypeSpl = (x: GateType): x is GateType & { __kind: 'Spl' } =>
  x.__kind === 'Spl'

/**
 * @category userTypes
 * @category generated
 */
export const gateTypeBeet = beet.dataEnum<GateTypeRecord>([
  [
    'Collection',
    new beet.BeetArgsStruct<GateTypeRecord['Collection']>(
      [['gate', collectionTypeBeet]],
      'GateTypeRecord["Collection"]'
    ),
  ],

  [
    'Spl',
    new beet.BeetArgsStruct<GateTypeRecord['Spl']>(
      [['gate', splTypeBeet]],
      'GateTypeRecord["Spl"]'
    ),
  ],
]) as beet.FixableBeet<GateType, GateType>
